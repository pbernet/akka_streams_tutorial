akka {
  # Doc: https://doc.akka.io/docs/akka/current/general/configuration.html
  # We are interested in log messages from the akka* libs eg from JmsAckConsumer
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  # level during application start-up until normal logging is available
  stdout-loglevel = "DEBUG"

  # Limit file size to 60 MB in HttpFileEcho
  http.server.parsing.max-content-length = 62914560
  http.client.parsing.max-content-length = 62914560

  # Keep the connection alive in WebsocketEcho
  # see: https://doc.akka.io/docs/akka-http/current/server-side/websocket-support.html#automatic-keep-alive-ping-support
  # If not set, the connection would close on TCP idle-timeout (default is 1 minute)
  http.server.websocket.periodic-keep-alive-max-idle = 10 seconds

  # The shared Host Connection Pool is used in all akka http client examples eg HttpFileEchoStream, HTTPResponseStream
  # see: https://doc.akka.io/docs/akka-http/current/client-side/host-level.html
  http.host-connection-pool {
    max-connections = 10
    max-retries = 5
  }
}

streamz.camel.consumer.receive.timeout = 10s

# Example of a custom dispatcher
custom-dispatcher-for-blocking {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 16
  }
  throughput = 1
}

slick-postgres {
  profile = "slick.jdbc.PostgresProfile$"
  db {
    # Not needed
    # dataSourceClass = "slick.jdbc.DriverDataSource"
    properties = {
      driver = "org.postgresql.Driver"
      # Replaced dynamically with mapped port
      url = "jdbc:postgresql://127.0.0.1:5432/test"
      user = "test"
      password = "test"
    }
  }
}
